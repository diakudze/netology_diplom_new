#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	#Область ОбработчикиСобытий
	
	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоНовый() Тогда 
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Специалист, "Наименование");
 			Специалист_Наименование = ЗначенияРеквизитов.Наименование;
			     
			Документы.ВКМ_ОбслуживаниеКлиента.СоздатьИлиИзменитьЭлементСпрВКМ_УведомленияТелеграмБоту(Истина, Дата, ДатаПроведенияРабот, Специалист_Наименование, ВремяНачалаРаботПланируемое,ВремяОкончанияРаботПланируемое,Номер,Неопределено);
		Иначе 
			Ответственный = Пользователи.ТекущийПользователь();	

			Если ЗначениеЗаполнено(Ссылка) Тогда
				Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Дата, ДатаПроведенияРабот, ВремяНачалаРаботПланируемое, ВремяОкончанияРаботПланируемое, Специалист",,);	
				МассивИзменений = Новый Массив;
				Если Формат(ДатаПроведенияРабот, "ДФ=dd.MM.yyyy") <> Формат(Значения.ДатаПроведенияРабот, "ДФ=dd.MM.yyyy") Тогда
					МассивИзменений.Добавить("ДатаПроведения");	
				КонецЕсли;
				
				Если Формат(ВремяНачалаРаботПланируемое, "ДЛФ=T") <> Формат(Значения.ВремяНачалаРаботПланируемое, "ДЛФ=T") 
					ИЛИ Формат(ВремяОкончанияРаботПланируемое, "ДЛФ=T") <> Формат(Значения.ВремяОкончанияРаботПланируемое, "ДЛФ=T") Тогда
					МассивИзменений.Добавить("ВремяПроведения"); 
				КонецЕсли;
				
				Если Специалист <> Значения.Специалист Тогда  
					МассивИзменений.Добавить("Специалист");	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(МассивИзменений) Тогда
					Документы.ВКМ_ОбслуживаниеКлиента.СоздатьИлиИзменитьЭлементСпрВКМ_УведомленияТелеграмБоту(Ложь, Дата, ДатаПроведенияРабот, Специалист, ВремяНачалаРаботПланируемое,ВремяОкончанияРаботПланируемое, Номер, МассивИзменений);
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли
		
	КонецПроцедуры
	
	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецПроцедуры
	
	Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
		//Проверка вида договора и его актуальности на дату документа, + стоимость часа.	
		Выборка_ДанныеДоговора = ВернутьДанныеДоговораКонтрагента(); 
		//Проверка данных специалиста(процент премии)	
		Выборка_ДанныеСпециалиста = ВернутьДанныеСпециалиста();
		
		//Проверка данных договора
		Если ЗначениеЗаполнено(Выборка_ДанныеДоговора) Тогда
			Выборка_ДанныеДоговора.Следующий();
			Если НЕ Выборка_ДанныеДоговора.АктуальныйДоговор Тогда
				Отказ = Истина;  
				ОбщегоНазначения.СообщитьПользователю("Выбран неверный договор (договор с неактуальным сроком действия, или вид договора не абоненсткое абслуживание)");
			КонецЕсли;
			СтоимостьЧаса = Выборка_ДанныеДоговора.СтоимостьЧаса;
		КонецЕсли;                
		
		//Проверка данных сотрудника
		Если Выборка_ДанныеСпециалиста.Следующий() Тогда  
			Выборка_ДанныеСпециалиста.Следующий();
			Если НЕ Выборка_ДанныеСпециалиста.АктуальныеДанныеСотрудника Тогда
				Отказ = Истина;
			КонецЕсли;
			ПроцентОтРабот = Выборка_ДанныеСпециалиста.ПроцентОтРабот;	
			Если Не Выборка_ДанныеСпециалиста.АктуальныеДанныеСотрудника Тогда
				
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Для сотрудника: %1 не указан процент премии в РС__УсловияОплатыСотрудников!", Специалист)); 
				Отказ = Истина; 
				Возврат;  
			КонецЕсли;
		Иначе
			Отказ = Истина;
			
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Для сотрудника: %1 не заполнены данные(оклад, процент премии) в РС__УсловияОплатыСотрудников!", Специалист)); 
		КонецЕсли; 
		
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;   
		
		Если ЗначениеЗаполнено(ВыполненныеРаботы) Тогда             		
			
			Часы = ВыполненныеРаботы.Выгрузить();
			Если Часы.Количество() > 0 Тогда 
				Часы.Свернуть(,"ЧасыКОплатеКлиенту, ЧасовПотраченоФакт"); 
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			//РН ВКМ_ВыполненныеКлиентуРаботы	
			Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.Клиент = Клиент; 
			Движение.Договор = Договор; 
			Движение.СуммаКОплате = Часы[0].ЧасыКОплатеКлиенту * СтоимостьЧаса;  
			Движение.КоличествоЧасов = Часы[0].ЧасыКОплатеКлиенту; 
			Движение.Период = ДатаПроведенияРабот; 
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход; 
			
			Движения.ВКМ_ВыполненныеКлиентуРаботы.Записать();    
			
			//РН ВКМ_ВыполненныеСотрудникомРаботы	
			Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
			Движение.Сотрудник = Специалист; 
			Движение.СуммаКОплате = Часы[0].ЧасыКОплатеКлиенту * СтоимостьЧаса * ПроцентОтРабот / 100;  
			Движение.ЧасовКОплате = Часы[0].ЧасыКОплатеКлиенту; 
			Движение.Период = ДатаПроведенияРабот; 
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход; 
			
			Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать();
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	#КонецОбласти
	
	
	#Область СлужебныеПроцедурыИФункции 
	
	Функция ВернутьДанныеДоговораКонтрагента();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание)
		               |				И (ВКМ_ОбслуживаниеКлиента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.ВКМ_НачалоДействия, ДЕНЬ) И КОНЕЦПЕРИОДА(ДоговорыКонтрагентов.ВКМ_ОкончаниеДействия, ДЕНЬ))
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК АктуальныйДоговор,
		               |	ДоговорыКонтрагентов.ВКМ_СтоимостьЧаса КАК СтоимостьЧаса
		               |ИЗ
		               |	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО ВКМ_ОбслуживаниеКлиента.Договор = ДоговорыКонтрагентов.Ссылка
		               |ГДЕ
		               |	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
		               |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат Выборка;
		
	КонецФункции
	
	Функция ВернутьДанныеСпециалиста();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот,
		|	ВЫБОР
		|		КОГДА ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот >= 0
		|			ТОГДА ИСТИНА
		|	КОНЕЦ КАК АктуальныеДанныеСотрудника
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних";
		
		Запрос.УстановитьПараметр("Сотрудник", Специалист); 
		Запрос.УстановитьПараметр("Дата", Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат Выборка;
		
	КонецФункции
	
	#КонецОбласти
	
#КонецЕсли
